const { onRequest } = require("firebase-functions/v2/https");
const { defineSecret } = require("firebase-functions/params");
const admin = require("firebase-admin");
const cors = require("cors")({ origin: true });

// 🔹 Firebase Admin 초기화 (서버에서만 Firebase 설정 사용)
admin.initializeApp();
const db = admin.firestore();

// 🔹 Firebase Secret 환경 변수 (보안 강화)
const fbAuthDomain = defineSecret("FB_AUTH_DOMAIN");
const fbProjectId = defineSecret("FB_PROJECT_ID");
const fbStorageBucket = defineSecret("FB_STORAGE_BUCKET");
const fbApiKey = defineSecret("FB_API_KEY");
const fbMessagingSenderId = defineSecret("FB_MESSAGING_SENDER_ID"); // ✅ 추가됨
const fbAppId = defineSecret("FB_APP_ID"); // ✅ 추가됨

// 🔹 Firestore에서 관리자 코드 가져오는 API (getAdminCode)
exports.getAdminCode = onRequest(async (req, res) => {
    cors(req, res, async () => {
        try {
            const docRef = db.collection("AdminSettings").doc("settings");
            const docSnap = await docRef.get();

            if (!docSnap.exists) {
                return res.status(404).json({ error: "관리자 코드 설정을 찾을 수 없습니다." });
            }

            const data = docSnap.data();
            return res.status(200).json({ adminCode: data.adminCode });
        } catch (error) {
            console.error("🚨 관리자 코드 불러오기 실패:", error);
            return res.status(500).json({ error: "서버 내부 오류", details: error.message });
        }
    });
});

// 🔹 Firebase 환경 변수 가져오는 API (보안 강화)
exports.getFirebaseConfig = onRequest({ secrets: [fbAuthDomain, fbProjectId, fbStorageBucket, fbApiKey, fbMessagingSenderId, fbAppId] }, async (req, res) => {
    cors(req, res, async () => {
        try {
            // 🔹 Firebase 인증 토큰 확인 (추가 보안)
            const idToken = req.headers.authorization?.split("Bearer ")[1];
            if (!idToken) {
                return res.status(403).json({ error: "❌ Unauthorized: Firebase 인증이 필요합니다." });
            }

            // 🔹 Firebase Authentication으로 사용자 검증
            const decodedToken = await admin.auth().verifyIdToken(idToken);
            console.log("✅ 인증된 사용자:", decodedToken.uid);

            // 🔹 인증된 사용자에게만 Firebase 설정 반환
            res.json({
                authDomain: fbAuthDomain.value(),
                projectId: fbProjectId.value(),
                storageBucket: fbStorageBucket.value(),
                apiKey: fbApiKey.value(),
                messagingSenderId: fbMessagingSenderId.value(),
                appId: fbAppId.value(),
            });
        } catch (error) {
            console.error("❌ Firebase 인증 실패:", error);
            return res.status(403).json({ error: "❌ Invalid token" });
        }
    });
});
